initSidebarItems({"constant":[["NONE_ACTION",""],["NONE_ACTION_GROUP",""],["NONE_ACTION_MAP",""],["NONE_APPLICATION",""],["NONE_APPLICATION_COMMAND_LINE",""],["NONE_APP_INFO",""],["NONE_APP_LAUNCH_CONTEXT",""],["NONE_BUFFERED_INPUT_STREAM",""],["NONE_BUFFERED_OUTPUT_STREAM",""],["NONE_CANCELLABLE",""],["NONE_CHARSET_CONVERTER",""],["NONE_CONVERTER",""],["NONE_CONVERTER_INPUT_STREAM",""],["NONE_CONVERTER_OUTPUT_STREAM",""],["NONE_DATA_INPUT_STREAM",""],["NONE_DATA_OUTPUT_STREAM",""],["NONE_DBUS_INTERFACE",""],["NONE_DBUS_INTERFACE_SKELETON",""],["NONE_DBUS_OBJECT",""],["NONE_DBUS_PROXY",""],["NONE_DESKTOP_APP_INFO",""],["NONE_DRIVE",""],["NONE_EMBLEMED_ICON",""],["NONE_FILE",""],["NONE_FILENAME_COMPLETER",""],["NONE_FILE_ENUMERATOR",""],["NONE_FILE_INPUT_STREAM",""],["NONE_FILE_IO_STREAM",""],["NONE_FILE_MONITOR",""],["NONE_FILE_OUTPUT_STREAM",""],["NONE_FILTER_INPUT_STREAM",""],["NONE_FILTER_OUTPUT_STREAM",""],["NONE_ICON",""],["NONE_INET_ADDRESS",""],["NONE_INET_ADDRESS_MASK",""],["NONE_INET_SOCKET_ADDRESS",""],["NONE_INPUT_STREAM",""],["NONE_IO_STREAM",""],["NONE_LIST_MODEL",""],["NONE_LIST_STORE",""],["NONE_LOADABLE_ICON",""],["NONE_MEMORY_INPUT_STREAM",""],["NONE_MEMORY_MONITOR",""],["NONE_MEMORY_OUTPUT_STREAM",""],["NONE_MENU_ATTRIBUTE_ITER",""],["NONE_MENU_LINK_ITER",""],["NONE_MENU_MODEL",""],["NONE_MOUNT",""],["NONE_MOUNT_OPERATION",""],["NONE_NETWORK_ADDRESS",""],["NONE_NETWORK_MONITOR",""],["NONE_NETWORK_SERVICE",""],["NONE_OUTPUT_STREAM",""],["NONE_PERMISSION",""],["NONE_POLLABLE_INPUT_STREAM",""],["NONE_POLLABLE_OUTPUT_STREAM",""],["NONE_PROXY",""],["NONE_PROXY_ADDRESS",""],["NONE_PROXY_RESOLVER",""],["NONE_REMOTE_ACTION_GROUP",""],["NONE_RESOLVER",""],["NONE_SEEKABLE",""],["NONE_SETTINGS",""],["NONE_SETTINGS_BACKEND",""],["NONE_SIMPLE_ACTION_GROUP",""],["NONE_SOCKET",""],["NONE_SOCKET_ADDRESS",""],["NONE_SOCKET_ADDRESS_ENUMERATOR",""],["NONE_SOCKET_CLIENT",""],["NONE_SOCKET_CONNECTABLE",""],["NONE_SOCKET_CONNECTION",""],["NONE_SOCKET_LISTENER",""],["NONE_SOCKET_SERVICE",""],["NONE_TCP_CONNECTION",""],["NONE_THREADED_SOCKET_SERVICE",""],["NONE_TLS_CERTIFICATE",""],["NONE_TLS_CLIENT_CONNECTION",""],["NONE_TLS_CONNECTION",""],["NONE_TLS_DATABASE",""],["NONE_TLS_FILE_DATABASE",""],["NONE_TLS_INTERACTION",""],["NONE_TLS_PASSWORD",""],["NONE_TLS_SERVER_CONNECTION",""],["NONE_UNIX_FD_LIST",""],["NONE_UNIX_INPUT_STREAM",""],["NONE_UNIX_OUTPUT_STREAM",""],["NONE_UNIX_SOCKET_ADDRESS",""],["NONE_VFS",""],["NONE_VOLUME",""],["NONE_VOLUME_MONITOR",""],["NONE_ZLIB_COMPRESSOR",""],["NONE_ZLIB_DECOMPRESSOR",""]],"enum":[["BusType","An enumeration for well-known message buses."],["ConverterResult","Results returned from `Converter::convert`."],["CredentialsType","Enumeration describing different kinds of native credential types."],["DBusMessageByteOrder","Enumeration used to describe the byte order of a D-Bus message."],["DBusMessageHeaderField","Header fields used in `DBusMessage`."],["DBusMessageType","Message types used in `DBusMessage`."],["DataStreamByteOrder","`DataStreamByteOrder` is used to ensure proper endianness of streaming data sources across various machine architectures."],["DataStreamNewlineType","`DataStreamNewlineType` is used when checking for or setting the line endings for a given file."],["DriveStartStopType","Enumeration describing how a drive can be started/stopped."],["EmblemOrigin","GEmblemOrigin is used to add information about the origin of the emblem to `Emblem`."],["FileAttributeStatus","Used by `File::set_attributes_from_info` when setting file attributes."],["FileAttributeType","The data types for file attributes."],["FileMonitorEvent","Specifies what type of event a monitor event is."],["FileType","Indicates the file's on-disk type."],["IOErrorEnum","Error codes returned by GIO functions."],["InetAddressBytes",""],["MemoryMonitorWarningLevel","Memory availability warning levels."],["MountOperationResult","`MountOperationResult` is returned as a result when a request for information is send by the mounting operation."],["NetworkConnectivity","The host's network connectivity state, as reported by `NetworkMonitor`."],["NotificationPriority","Priority levels for `GNotifications`."],["PasswordSave","`PasswordSave` is used to indicate the lifespan of a saved password."],["ResolverRecordType","The type of record that `ResolverExt::lookup_records` or `ResolverExt::lookup_records_async` should retrieve. The records are returned as lists of `glib::Variant` tuples. Each record type has different values in the variant tuples returned."],["ResourceError","An error code used with `G_RESOURCE_ERROR` in a `glib::Error` returned from a `Resource` routine."],["SocketClientEvent","Describes an event occurring on a `SocketClient`. See the `SocketClient::event` signal for more details."],["SocketFamily","The protocol family of a `SocketAddress`. (These values are identical to the system defines `AF_INET`, `AF_INET6` and `AF_UNIX`, if available.)"],["SocketListenerEvent","Describes an event occurring on a `SocketListener`. See the `SocketListener::event` signal for more details."],["SocketProtocol","A protocol identifier is specified when creating a `Socket`, which is a family/type specific identifier, where 0 means the default protocol for the particular family/type."],["SocketType","Flags used when creating a `Socket`. Some protocols may not implement all the socket types."],["TlsAuthenticationMode","The client authentication mode for a `TlsServerConnection`."],["TlsCertificateRequestFlags","Flags for `TlsInteractionExt::request_certificate`, `TlsInteractionExt::request_certificate_async`, and `TlsInteractionExt::invoke_request_certificate`."],["TlsDatabaseLookupFlags","Flags for `TlsDatabaseExt::lookup_certificate_for_handle`, `TlsDatabaseExt::lookup_certificate_issuer`, and `TlsDatabaseExt::lookup_certificates_issued_by`."],["TlsInteractionResult","`TlsInteractionResult` is returned by various functions in `TlsInteraction` when finishing an interaction request."],["TlsRehandshakeMode","When to allow rehandshaking. See `TlsConnectionExt::set_rehandshake_mode`."],["UnixSocketAddressType","The type of name used by a `UnixSocketAddress`. `UnixSocketAddressType::Path` indicates a traditional unix domain socket bound to a filesystem path. `UnixSocketAddressType::Anonymous` indicates a socket not bound to any name (eg, a client-side socket, or a socket created with `socketpair`)."],["ZlibCompressorFormat","Used to select the type of data format to use for `ZlibDecompressor` and `ZlibCompressor`."]],"fn":[["bus_get",""],["bus_get_future",""],["bus_get_sync",""],["bus_own_name",""],["bus_own_name_on_connection",""],["bus_unown_name",""],["bus_unwatch_name",""],["bus_watch_name",""],["bus_watch_name_on_connection",""],["content_type_can_be_executable",""],["content_type_equals",""],["content_type_from_mime_type",""],["content_type_get_description",""],["content_type_get_generic_icon_name",""],["content_type_get_icon",""],["content_type_get_mime_dirs",""],["content_type_get_mime_type",""],["content_type_get_symbolic_icon",""],["content_type_guess",""],["content_type_guess_for_tree",""],["content_type_is_a",""],["content_type_is_mime_type",""],["content_type_is_unknown",""],["content_type_set_mime_dirs",""],["content_types_get_registered",""],["dbus_address_escape_value",""],["dbus_address_get_for_bus_sync",""],["dbus_address_get_stream",""],["dbus_address_get_stream_future",""],["dbus_address_get_stream_sync",""],["dbus_generate_guid",""],["dbus_gvalue_to_gvariant",""],["dbus_gvariant_to_gvalue",""],["dbus_is_address",""],["dbus_is_guid",""],["dbus_is_interface_name",""],["dbus_is_member_name",""],["dbus_is_name",""],["dbus_is_supported_address",""],["dbus_is_unique_name",""],["io_error_from_errno",""],["io_error_quark",""],["io_modules_scan_all_in_directory",""],["io_scheduler_cancel_all_jobs",""],["keyfile_settings_backend_new",""],["memory_settings_backend_new",""],["networking_init",""],["null_settings_backend_new",""],["resources_enumerate_children",""],["resources_get_info",""],["resources_lookup_data",""],["resources_open_stream",""],["resources_register",""],["resources_unregister",""],["unix_is_mount_path_system_internal",""],["unix_is_system_device_path",""],["unix_is_system_fs_type",""]],"mod":[["functions",""],["prelude","Traits and essential types intended for blanket imports."],["subclass",""]],"static":[["DRIVE_IDENTIFIER_KIND_UNIX_DEVICE",""],["FILE_ATTRIBUTE_ACCESS_CAN_DELETE",""],["FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE",""],["FILE_ATTRIBUTE_ACCESS_CAN_READ",""],["FILE_ATTRIBUTE_ACCESS_CAN_RENAME",""],["FILE_ATTRIBUTE_ACCESS_CAN_TRASH",""],["FILE_ATTRIBUTE_ACCESS_CAN_WRITE",""],["FILE_ATTRIBUTE_DOS_IS_ARCHIVE",""],["FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT",""],["FILE_ATTRIBUTE_DOS_IS_SYSTEM",""],["FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG",""],["FILE_ATTRIBUTE_ETAG_VALUE",""],["FILE_ATTRIBUTE_FILESYSTEM_FREE",""],["FILE_ATTRIBUTE_FILESYSTEM_READONLY",""],["FILE_ATTRIBUTE_FILESYSTEM_REMOTE",""],["FILE_ATTRIBUTE_FILESYSTEM_SIZE",""],["FILE_ATTRIBUTE_FILESYSTEM_TYPE",""],["FILE_ATTRIBUTE_FILESYSTEM_USED",""],["FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW",""],["FILE_ATTRIBUTE_GVFS_BACKEND",""],["FILE_ATTRIBUTE_ID_FILE",""],["FILE_ATTRIBUTE_ID_FILESYSTEM",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_START",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP",""],["FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT",""],["FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI",""],["FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC",""],["FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE",""],["FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE",""],["FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE",""],["FILE_ATTRIBUTE_OWNER_GROUP",""],["FILE_ATTRIBUTE_OWNER_USER",""],["FILE_ATTRIBUTE_OWNER_USER_REAL",""],["FILE_ATTRIBUTE_PREVIEW_ICON",""],["FILE_ATTRIBUTE_RECENT_MODIFIED",""],["FILE_ATTRIBUTE_SELINUX_CONTEXT",""],["FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE",""],["FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE",""],["FILE_ATTRIBUTE_STANDARD_COPY_NAME",""],["FILE_ATTRIBUTE_STANDARD_DESCRIPTION",""],["FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME",""],["FILE_ATTRIBUTE_STANDARD_EDIT_NAME",""],["FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE",""],["FILE_ATTRIBUTE_STANDARD_ICON",""],["FILE_ATTRIBUTE_STANDARD_IS_BACKUP",""],["FILE_ATTRIBUTE_STANDARD_IS_HIDDEN",""],["FILE_ATTRIBUTE_STANDARD_IS_SYMLINK",""],["FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL",""],["FILE_ATTRIBUTE_STANDARD_IS_VOLATILE",""],["FILE_ATTRIBUTE_STANDARD_NAME",""],["FILE_ATTRIBUTE_STANDARD_SIZE",""],["FILE_ATTRIBUTE_STANDARD_SORT_ORDER",""],["FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON",""],["FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET",""],["FILE_ATTRIBUTE_STANDARD_TARGET_URI",""],["FILE_ATTRIBUTE_STANDARD_TYPE",""],["FILE_ATTRIBUTE_THUMBNAILING_FAILED",""],["FILE_ATTRIBUTE_THUMBNAIL_IS_VALID",""],["FILE_ATTRIBUTE_THUMBNAIL_PATH",""],["FILE_ATTRIBUTE_TIME_ACCESS",""],["FILE_ATTRIBUTE_TIME_ACCESS_USEC",""],["FILE_ATTRIBUTE_TIME_CHANGED",""],["FILE_ATTRIBUTE_TIME_CHANGED_USEC",""],["FILE_ATTRIBUTE_TIME_CREATED",""],["FILE_ATTRIBUTE_TIME_CREATED_USEC",""],["FILE_ATTRIBUTE_TIME_MODIFIED",""],["FILE_ATTRIBUTE_TIME_MODIFIED_USEC",""],["FILE_ATTRIBUTE_TRASH_DELETION_DATE",""],["FILE_ATTRIBUTE_TRASH_ITEM_COUNT",""],["FILE_ATTRIBUTE_TRASH_ORIG_PATH",""],["FILE_ATTRIBUTE_UNIX_BLOCKS",""],["FILE_ATTRIBUTE_UNIX_BLOCK_SIZE",""],["FILE_ATTRIBUTE_UNIX_DEVICE",""],["FILE_ATTRIBUTE_UNIX_GID",""],["FILE_ATTRIBUTE_UNIX_INODE",""],["FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT",""],["FILE_ATTRIBUTE_UNIX_MODE",""],["FILE_ATTRIBUTE_UNIX_NLINK",""],["FILE_ATTRIBUTE_UNIX_RDEV",""],["FILE_ATTRIBUTE_UNIX_UID",""],["MEMORY_MONITOR_EXTENSION_POINT_NAME",""],["MENU_ATTRIBUTE_ACTION",""],["MENU_ATTRIBUTE_ACTION_NAMESPACE",""],["MENU_ATTRIBUTE_ICON",""],["MENU_ATTRIBUTE_LABEL",""],["MENU_ATTRIBUTE_TARGET",""],["MENU_LINK_SECTION",""],["MENU_LINK_SUBMENU",""],["NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME",""],["NETWORK_MONITOR_EXTENSION_POINT_NAME",""],["PROXY_EXTENSION_POINT_NAME",""],["PROXY_RESOLVER_EXTENSION_POINT_NAME",""],["SETTINGS_BACKEND_EXTENSION_POINT_NAME",""],["TLS_BACKEND_EXTENSION_POINT_NAME",""],["TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT",""],["TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER",""],["VFS_EXTENSION_POINT_NAME",""],["VOLUME_IDENTIFIER_KIND_CLASS",""],["VOLUME_IDENTIFIER_KIND_HAL_UDI",""],["VOLUME_IDENTIFIER_KIND_LABEL",""],["VOLUME_IDENTIFIER_KIND_NFS_MOUNT",""],["VOLUME_IDENTIFIER_KIND_UNIX_DEVICE",""],["VOLUME_IDENTIFIER_KIND_UUID",""],["VOLUME_MONITOR_EXTENSION_POINT_NAME",""]],"struct":[["Action","`Action` represents a single named action."],["ActionGroup","`ActionGroup` represents a group of actions. Actions can be used to expose functionality in a structured way, either from one part of a program to another, or to the outside world. Action groups are often used together with a `MenuModel` that provides additional representation data for displaying the actions to the user, e.g. in a menu."],["ActionGroupExportId",""],["ActionMap","The GActionMap interface is implemented by `ActionGroup` implementations that operate by containing a number of named `Action` instances, such as `SimpleActionGroup`."],["AppInfo","`AppInfo` and `AppLaunchContext` are used for describing and launching applications installed on the system."],["AppInfoCreateFlags","Flags used when creating a `AppInfo`."],["AppInfoMonitor","`AppInfoMonitor` is a very simple object used for monitoring the app info database for changes (ie: newly installed or removed applications)."],["AppInfoMonitorClass",""],["AppLaunchContext","Integrating the launch with the launching application. This is used to handle for instance startup notification and launching the new application on the same screen as the launching window."],["AppLaunchContextClass",""],["Application","A `Application` is the foundation of an application. It wraps some low-level platform-specific services and is intended to act as the foundation for higher-level application classes such as `GtkApplication` or `MxApplication`. In general, you should not use this class outside of a higher level framework."],["ApplicationBuilder",""],["ApplicationClass",""],["ApplicationCommandLine","`ApplicationCommandLine` represents a command-line invocation of an application. It is created by `Application` and emitted in the `Application::command-line` signal and virtual function."],["ApplicationCommandLineClass",""],["ApplicationFlags","Flags used to define the behaviour of a `Application`."],["AskPasswordFlags","`AskPasswordFlags` are used to request specific information from the user, or to notify the user of their choices in an authentication situation."],["BufferedInputStream","Buffered input stream implements `FilterInputStream` and provides for buffered reads."],["BufferedInputStreamBuilder",""],["BufferedInputStreamClass",""],["BufferedOutputStream","Buffered output stream implements `FilterOutputStream` and provides for buffered writes."],["BufferedOutputStreamBuilder",""],["BufferedOutputStreamClass",""],["BusNameOwnerFlags","Flags used in `g_bus_own_name`."],["BusNameWatcherFlags","Flags used in `g_bus_watch_name`."],["BytesIcon","`BytesIcon` specifies an image held in memory in a common format (usually png) to be used as icon."],["BytesIconClass",""],["Cancellable","GCancellable is a thread-safe operation cancellation stack used throughout GIO to allow for cancellation of synchronous and asynchronous operations."],["CancellableClass",""],["CharsetConverter","`CharsetConverter` is an implementation of `Converter` based on GIConv."],["CharsetConverterBuilder",""],["CharsetConverterClass",""],["Converter","`Converter` is implemented by objects that convert binary data in various ways. The conversion can be stateful and may fail at any place."],["ConverterFlags","Flags used when calling a `Converter::convert`."],["ConverterInputStream","Converter input stream implements `InputStream` and allows conversion of data of various types during reading."],["ConverterInputStreamBuilder",""],["ConverterInputStreamClass",""],["ConverterOutputStream","Converter output stream implements `OutputStream` and allows conversion of data of various types during reading."],["ConverterOutputStreamBuilder",""],["ConverterOutputStreamClass",""],["Credentials","The `Credentials` type is a reference-counted wrapper for native credentials. This information is typically used for identifying, authenticating and authorizing other processes."],["CredentialsClass",""],["DBusArgInfo","Information about an argument for a method or a signal."],["DBusAuthObserver","The `DBusAuthObserver` type provides a mechanism for participating in how a `DBusServer` (or a `DBusConnection`) authenticates remote peers. Simply instantiate a `DBusAuthObserver` and connect to the signals you are interested in. Note that new signals may be added in the future"],["DBusAuthObserverClass",""],["DBusCallFlags","Flags used in `DBusConnection::call` and similar APIs."],["DBusCapabilityFlags","Capabilities negotiated with the remote peer."],["DBusConnection","The `DBusConnection` type is used for D-Bus connections to remote peers such as a message buses. It is a low-level API that offers a lot of flexibility. For instance, it lets you establish a connection over any transport that can by represented as a `IOStream`."],["DBusConnectionClass",""],["DBusConnectionFlags","Flags used when creating a new `DBusConnection`."],["DBusInterface","The `DBusInterface` type is the base type for D-Bus interfaces both on the service side (see `DBusInterfaceSkeleton`) and client side (see `DBusProxy`)."],["DBusInterfaceInfo","Information about a D-Bus interface."],["DBusInterfaceSkeleton","Abstract base class for D-Bus interfaces on the service side."],["DBusInterfaceSkeletonClass",""],["DBusInterfaceSkeletonFlags","Flags describing the behavior of a `DBusInterfaceSkeleton` instance."],["DBusMenuModel","`DBusMenuModel` is an implementation of `MenuModel` that can be used as a proxy for a menu model that is exported over D-Bus with `DBusConnection::export_menu_model`."],["DBusMenuModelClass",""],["DBusMessage","A type for representing D-Bus messages that can be sent or received on a `DBusConnection`."],["DBusMessageClass",""],["DBusMessageFlags","Message flags used in `DBusMessage`."],["DBusMethodInfo","Information about a method on an D-Bus interface."],["DBusMethodInvocation","Instances of the `DBusMethodInvocation` class are used when handling D-Bus method calls. It provides a way to asynchronously return results and errors."],["DBusMethodInvocationClass",""],["DBusNodeInfo","Information about nodes in a remote object hierarchy."],["DBusObject","The `DBusObject` type is the base type for D-Bus objects on both the service side (see `DBusObjectSkeleton`) and the client side (see `DBusObjectProxy`). It is essentially just a container of interfaces."],["DBusPropertyInfo","Information about a D-Bus property on a D-Bus interface."],["DBusProxy","`DBusProxy` is a base class used for proxies to access a D-Bus interface on a remote object. A `DBusProxy` can be constructed for both well-known and unique names."],["DBusProxyClass",""],["DBusProxyFlags","Flags used when constructing an instance of a `DBusProxy` derived class."],["DBusSendMessageFlags","Flags used when sending `GDBusMessages` on a `DBusConnection`."],["DBusServer","`DBusServer` is a helper for listening to and accepting D-Bus connections. This can be used to create a new D-Bus server, allowing two peers to use the D-Bus protocol for their own specialized communication. A server instance provided in this way will not perform message routing or implement the org.freedesktop.DBus interface."],["DBusServerClass",""],["DBusServerFlags","Flags used when creating a `DBusServer`."],["DBusSignalFlags","Flags used when subscribing to signals via `DBusConnection::signal_subscribe`."],["DBusSignalInfo","Information about a signal on a D-Bus interface."],["DataInputStream","Data input stream implements `InputStream` and includes functions for reading structured data directly from a binary input stream."],["DataInputStreamBuilder",""],["DataInputStreamClass",""],["DataOutputStream","Data output stream implements `OutputStream` and includes functions for writing data directly to an output stream."],["DataOutputStreamBuilder",""],["DataOutputStreamClass",""],["DesktopAppInfo","`DesktopAppInfo` is an implementation of `AppInfo` based on desktop files."],["DesktopAppInfoClass",""],["Drive","`Drive` - this represent a piece of hardware connected to the machine. It's generally only created for removable hardware or hardware with removable media."],["DriveStartFlags","Flags used when starting a drive."],["Emblem","`Emblem` is an implementation of `Icon` that supports having an emblem, which is an icon with additional properties. It can than be added to a `EmblemedIcon`."],["EmblemClass",""],["EmblemedIcon","`EmblemedIcon` is an implementation of `Icon` that supports adding an emblem to an icon. Adding multiple emblems to an icon is ensured via `EmblemedIconExt::add_emblem`."],["EmblemedIconClass",""],["File","`File` is a high level abstraction for manipulating files on a virtual file system. `GFiles` are lightweight, immutable objects that do no I/O upon creation. It is necessary to understand that `File` objects do not represent files, merely an identifier for a file. All file content I/O is implemented as streaming operations (see `InputStream` and `OutputStream`)."],["FileAttributeMatcher","Determines if a string matches a file attribute."],["FileAttributematcherIter",""],["FileCopyFlags","Flags used when copying or moving files."],["FileCreateFlags","Flags used when an operation may create a file."],["FileEnumerator","`FileEnumerator` allows you to operate on a set of `GFiles`, returning a `FileInfo` structure for each file enumerated (e.g. `File::enumerate_children` will return a `FileEnumerator` for each of the children within a directory)."],["FileEnumeratorClass",""],["FileIOStream","GFileIOStream provides io streams that both read and write to the same file handle."],["FileIOStreamClass",""],["FileIcon","`FileIcon` specifies an icon by pointing to an image file to be used as icon."],["FileIconClass",""],["FileInfo","Functionality for manipulating basic metadata for files. `FileInfo` implements methods for getting information that all files should contain, and allows for manipulation of extended attributes."],["FileInfoClass",""],["FileInputStream","GFileInputStream provides input streams that take their content from a file."],["FileInputStreamClass",""],["FileMeasureFlags","Flags that can be used with `File::measure_disk_usage`."],["FileMonitor","Monitors a file or directory for changes."],["FileMonitorClass",""],["FileMonitorFlags","Flags used to set what a `FileMonitor` will watch for."],["FileOutputStream","GFileOutputStream provides output streams that write their content to a file."],["FileOutputStreamClass",""],["FileQueryInfoFlags","Flags used when querying a `FileInfo`."],["FilenameCompleter","Completes partial file and directory names given a partial string by looking in the file system for clues. Can return a list of possible completion strings for widget implementations."],["FilenameCompleterClass",""],["FilterId",""],["FilterInputStream","Base class for input stream implementations that perform some kind of filtering operation on a base stream. Typical examples of filtering operations are character set conversion, compression and byte order flipping."],["FilterInputStreamClass",""],["FilterOutputStream","Base class for output stream implementations that perform some kind of filtering operation on a base stream. Typical examples of filtering operations are character set conversion, compression and byte order flipping."],["FilterOutputStreamClass",""],["GioFuture",""],["GioFutureResult",""],["IOStream","GIOStream represents an object that has both read and write streams. Generally the two streams act as separate input and output streams, but they share some common resources and state. For instance, for seekable streams, both streams may use the same position."],["IOStreamAsyncReadWrite",""],["IOStreamClass",""],["IOStreamSpliceFlags","GIOStreamSpliceFlags determine how streams should be spliced."],["Icon","`Icon` is a very minimal interface for icons. It provides functions for checking the equality of two icons, hashing of icons and serializing an icon to and from strings."],["InetAddress","`InetAddress` represents an IPv4 or IPv6 internet address. Use `ResolverExt::lookup_by_name` or `ResolverExt::lookup_by_name_async` to look up the `InetAddress` for a hostname. Use `ResolverExt::lookup_by_address` or `ResolverExt::lookup_by_address_async` to look up the hostname for a `InetAddress`."],["InetAddressClass",""],["InetAddressMask","`InetAddressMask` represents a range of IPv4 or IPv6 addresses described by a base address and a length indicating how many bits of the base address are relevant for matching purposes. These are often given in string form. Eg, \"10.0.0.0/8\", or \"fe80::/10\"."],["InetAddressMaskClass",""],["InetSocketAddress","An IPv4 or IPv6 socket address; that is, the combination of a `InetAddress` and a port number."],["InetSocketAddressClass",""],["InputStream","`InputStream` has functions to read from a stream (`InputStream::read`), to close a stream (`InputStreamExt::close`) and to skip some content (`InputStreamExt::skip`)."],["InputStreamAsyncBufRead",""],["InputStreamAsyncRead",""],["InputStreamClass",""],["InputStreamRead",""],["ListModel","`ListModel` is an interface that represents a mutable list of `GObjects`. Its main intention is as a model for various widgets in user interfaces, such as list views, but it can also be used as a convenient method of returning lists of data, with support for updates."],["ListStore","`ListStore` is a simple implementation of `ListModel` that stores all items in memory."],["ListStoreBuilder",""],["ListStoreClass",""],["LoadableIcon","Extends the `Icon` interface and adds the ability to load icons from streams."],["MemoryInputStream","`MemoryInputStream` is a class for using arbitrary memory chunks as input for GIO streaming input operations."],["MemoryInputStreamClass",""],["MemoryMonitor","`MemoryMonitor` will monitor system memory and suggest to the application when to free memory so as to leave more room for other applications. It is implemented on Linux using the Low Memory Monitor (API documentation)."],["MemoryOutputStream","`MemoryOutputStream` is a class for using arbitrary memory chunks as output for GIO streaming output operations."],["MemoryOutputStreamClass",""],["Menu","`Menu` is a simple implementation of `MenuModel`. You populate a `Menu` by adding `MenuItem` instances to it."],["MenuAttributeIter","`MenuAttributeIter` is an opaque structure type. You must access it using the functions below."],["MenuAttributeIterClass",""],["MenuClass",""],["MenuItem","`MenuItem` is an opaque structure type. You must access it using the functions below."],["MenuItemClass",""],["MenuLinkIter","`MenuLinkIter` is an opaque structure type. You must access it using the functions below."],["MenuLinkIterClass",""],["MenuModel","`MenuModel` represents the contents of a menu -- an ordered list of menu items. The items are associated with actions, which can be activated through them. Items can be grouped in sections, and may have submenus associated with them. Both items and sections usually have some representation data, such as labels or icons. The type of the associated action (ie whether it is stateful, and what kind of state it has) can influence the representation of the item."],["MenuModelClass",""],["MenuModelExportId",""],["Mount","The `Mount` interface represents user-visible mounts. Note, when porting from GnomeVFS, `Mount` is the moral equivalent of `GnomeVFSVolume`."],["MountMountFlags","Flags used when mounting a mount."],["MountOperation","`MountOperation` provides a mechanism for interacting with the user. It can be used for authenticating mountable operations, such as loop mounting files, hard drive partitions or server locations. It can also be used to ask the user questions or show a list of applications preventing unmount or eject operations from completing."],["MountOperationClass",""],["MountUnmountFlags","Flags used when an unmounting a mount."],["NetworkAddress","`NetworkAddress` provides an easy way to resolve a hostname and then attempt to connect to that host, handling the possibility of multiple IP addresses and multiple address families."],["NetworkAddressClass",""],["NetworkMonitor","`NetworkMonitor` provides an easy-to-use cross-platform API for monitoring network connectivity. On Linux, the available implementations are based on the kernel's netlink interface and on NetworkManager."],["NetworkService","Like `NetworkAddress` does with hostnames, `NetworkService` provides an easy way to resolve a SRV record, and then attempt to connect to one of the hosts that implements that service, handling service priority/weighting, multiple IP addresses, and multiple address families."],["NetworkServiceClass",""],["Notification","`Notification` is a mechanism for creating a notification to be shown to the user -- typically as a pop-up notification presented by the desktop environment shell."],["NotificationClass",""],["OutputStream","`OutputStream` has functions to write to a stream (`OutputStreamExt::write`), to close a stream (`OutputStreamExt::close`) and to flush pending writes (`OutputStreamExt::flush`)."],["OutputStreamAsyncWrite",""],["OutputStreamClass",""],["OutputStreamSpliceFlags","GOutputStreamSpliceFlags determine how streams should be spliced."],["OutputStreamWrite",""],["OwnerId",""],["Permission","A `Permission` represents the status of the caller's permission to perform a certain action."],["PermissionClass",""],["PollableInputStream","`PollableInputStream` is implemented by `GInputStreams` that can be polled for readiness to read. This can be used when interfacing with a non-GIO API that expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style."],["PollableOutputStream","`PollableOutputStream` is implemented by `GOutputStreams` that can be polled for readiness to write. This can be used when interfacing with a non-GIO API that expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style."],["PropertyAction","A `PropertyAction` is a way to get a `Action` with a state value reflecting and controlling the value of a `gobject::Object` property."],["PropertyActionClass",""],["Proxy","A `Proxy` handles connecting to a remote host via a given type of proxy server. It is implemented by the 'gio-proxy' extension point. The extensions are named after their proxy protocol name. As an example, a SOCKS5 proxy implementation can be retrieved with the name 'socks5' using the function `IOExtensionPoint::get_extension_by_name`."],["ProxyAddress","Support for proxied `InetSocketAddress`."],["ProxyAddressClass",""],["ProxyResolver","`ProxyResolver` provides synchronous and asynchronous network proxy resolution. `ProxyResolver` is used within `SocketClient` through the method `SocketConnectable::proxy_enumerate`."],["ReadInputStream",""],["RegistrationId",""],["RemoteActionGroup","The GRemoteActionGroup interface is implemented by `ActionGroup` instances that either transmit action invocations to other processes or receive action invocations in the local process from other processes."],["Resolver","`Resolver` provides cancellable synchronous and asynchronous DNS resolution, for hostnames (`ResolverExt::lookup_by_address`, `ResolverExt::lookup_by_name` and their async variants) and SRV (service) records (`ResolverExt::lookup_service`)."],["ResolverClass",""],["ResolverNameLookupFlags","Flags to modify lookup behavior."],["Resource","Applications and libraries often contain binary or textual data that is really part of the application, rather than user data. For instance `GtkBuilder` .ui files, splashscreen images, GMenu markup XML, CSS files, icons, etc. These are often shipped as files in `$datadir/appname`, or manually included as literal strings in the code."],["ResourceLookupFlags","GResourceLookupFlags determine how resource path lookups are handled."],["Seekable","`Seekable` is implemented by streams (implementations of `InputStream` or `OutputStream`) that support seeking."],["Settings","The `Settings` class provides a convenient API for storing and retrieving application settings."],["SettingsBackend","The `SettingsBackend` interface defines a generic interface for non-strictly-typed data that is stored in a hierarchy. To implement an alternative storage backend for `Settings`, you need to implement the `SettingsBackend` interface and then make it implement the extension point `G_SETTINGS_BACKEND_EXTENSION_POINT_NAME`."],["SettingsBackendClass",""],["SettingsBindFlags","Flags used when creating a binding. These flags determine in which direction the binding works. The default is to synchronize in both directions."],["SettingsClass",""],["SettingsSchema","The `SettingsSchemaSource` and `SettingsSchema` APIs provide a mechanism for advanced control over the loading of schemas and a mechanism for introspecting their content."],["SettingsSchemaKey","`SettingsSchemaKey` is an opaque data structure and can only be accessed using the following functions."],["SettingsSchemaSource","This is an opaque structure type. You may not access it directly."],["SignalSubscriptionId",""],["SimpleAction","A `SimpleAction` is the obvious simple implementation of the `Action` interface. This is the easiest way to create an action for purposes of adding it to a `SimpleActionGroup`."],["SimpleActionClass",""],["SimpleActionGroup","`SimpleActionGroup` is a hash table filled with `Action` objects, implementing the `ActionGroup` and `ActionMap` interfaces."],["SimpleActionGroupClass",""],["SimpleIOStream","GSimpleIOStream creates a `IOStream` from an arbitrary `InputStream` and `OutputStream`. This allows any pair of input and output streams to be used with `IOStream` methods."],["SimpleIOStreamClass",""],["SimplePermission","`SimplePermission` is a trivial implementation of `Permission` that represents a permission that is either always or never allowed. The value is given at construction and doesn't change."],["SimplePermissionClass",""],["Socket","A `Socket` is a low-level networking primitive. It is a more or less direct mapping of the BSD socket API in a portable GObject based API. It supports both the UNIX socket implementations and winsock2 on Windows."],["SocketAddress","`SocketAddress` is the equivalent of struct sockaddr in the BSD sockets API. This is an abstract class; use `InetSocketAddress` for internet sockets, or `UnixSocketAddress` for UNIX domain sockets."],["SocketAddressClass",""],["SocketAddressEnumerator","`SocketAddressEnumerator` is an enumerator type for `SocketAddress` instances. It is returned by enumeration functions such as `SocketConnectable::enumerate`, which returns a `SocketAddressEnumerator` to list each `SocketAddress` which could be used to connect to that `SocketConnectable`."],["SocketAddressEnumeratorClass",""],["SocketClass",""],["SocketClient","`SocketClient` is a lightweight high-level utility class for connecting to a network host using a connection oriented socket type."],["SocketClientClass",""],["SocketConnectable","Objects that describe one or more potential socket endpoints implement `SocketConnectable`. Callers can then use `SocketConnectable::enumerate` to get a `SocketAddressEnumerator` to try out each socket address in turn until one succeeds, as shown in the sample code below."],["SocketConnection","`SocketConnection` is a `IOStream` for a connected socket. They can be created either by `SocketClient` when connecting to a host, or by `SocketListener` when accepting a new client."],["SocketConnectionClass",""],["SocketListener","A `SocketListener` is an object that keeps track of a set of server sockets and helps you accept sockets from any of the socket, either sync or async."],["SocketListenerClass",""],["SocketService","A `SocketService` is an object that represents a service that is provided to the network or over local sockets. When a new connection is made to the service the `SocketService::incoming` signal is emitted."],["SocketServiceClass",""],["SrvTarget","SRV (service) records are used by some network protocols to provide service-specific aliasing and load-balancing. For example, XMPP (Jabber) uses SRV records to locate the XMPP server for a domain; rather than connecting directly to \"example.com\" or assuming a specific server hostname like \"xmpp.example.com\", an XMPP client would look up the \"xmpp-client\" SRV record for \"example.com\", and then connect to whatever host was pointed to by that record."],["Subprocess","`Subprocess` allows the creation of and interaction with child processes."],["SubprocessClass",""],["SubprocessFlags","Flags to define the behaviour of a `Subprocess`."],["SubprocessLauncher","This class contains a set of options for launching child processes, such as where its standard input and output will be directed, the argument list, the environment, and more."],["SubprocessLauncherClass",""],["TcpConnection","This is the subclass of `SocketConnection` that is created for TCP/IP sockets."],["TcpConnectionClass",""],["ThemedIcon","`ThemedIcon` is an implementation of `Icon` that supports icon themes. `ThemedIcon` contains a list of all of the icons present in an icon theme, so that icons can be looked up quickly. `ThemedIcon` does not provide actual pixmaps for icons, just the icon names. Ideally something like `gtk_icon_theme_choose_icon` should be used to resolve the list of names so that fallback icons work nicely with themes that inherit other themes."],["ThemedIconClass",""],["ThreadedSocketService","A `ThreadedSocketService` is a simple subclass of `SocketService` that handles incoming connections by creating a worker thread and dispatching the connection to it by emitting the `ThreadedSocketService::run` signal in the new thread."],["ThreadedSocketServiceClass",""],["TlsCertificate","A certificate used for TLS authentication and encryption. This can represent either a certificate only (eg, the certificate received by a client from a server), or the combination of a certificate and a private key (which is needed when acting as a `TlsServerConnection`)."],["TlsCertificateClass",""],["TlsCertificateFlags","A set of flags describing TLS certification validation. This can be used to set which validation steps to perform (eg, with `TlsClientConnection::set_validation_flags`), or to describe why a particular certificate was rejected (eg, in `TlsConnection::accept-certificate`)."],["TlsClientConnection","`TlsClientConnection` is the client-side subclass of `TlsConnection`, representing a client-side TLS connection."],["TlsConnection","`TlsConnection` is the base TLS connection class type, which wraps a `IOStream` and provides TLS encryption on top of it. Its subclasses, `TlsClientConnection` and `TlsServerConnection`, implement client-side and server-side TLS, respectively."],["TlsConnectionClass",""],["TlsDatabase","`TlsDatabase` is used to look up certificates and other information from a certificate or key store. It is an abstract base class which TLS library specific subtypes override."],["TlsDatabaseClass",""],["TlsDatabaseVerifyFlags","Flags for `TlsDatabaseExt::verify_chain`."],["TlsFileDatabase","`TlsFileDatabase` is implemented by `TlsDatabase` objects which load their certificate information from a file. It is an interface which TLS library specific subtypes implement."],["TlsInteraction","`TlsInteraction` provides a mechanism for the TLS connection and database code to interact with the user. It can be used to ask the user for passwords."],["TlsInteractionClass",""],["TlsPassword","Holds a password used in TLS."],["TlsPasswordClass",""],["TlsPasswordFlags","Various flags for the password."],["TlsServerConnection","`TlsServerConnection` is the server-side subclass of `TlsConnection`, representing a server-side TLS connection."],["UnixFDList","A `UnixFDList` contains a list of file descriptors. It owns the file descriptors that it contains, closing them when finalized."],["UnixFDListClass",""],["UnixInputStream","`UnixInputStream` implements `InputStream` for reading from a UNIX file descriptor, including asynchronous operations. (If the file descriptor refers to a socket or pipe, this will use `poll` to do asynchronous I/O. If it refers to a regular file, it will fall back to doing asynchronous I/O in another thread.)"],["UnixInputStreamClass",""],["UnixMountEntry","Defines a Unix mount entry (e.g. `<filename>`/media/cdrom`</filename>`). This corresponds roughly to a mtab entry."],["UnixMountPoint","Defines a Unix mount point (e.g. `<filename>`/dev`</filename>`). This corresponds roughly to a fstab entry."],["UnixOutputStream","`UnixOutputStream` implements `OutputStream` for writing to a UNIX file descriptor, including asynchronous operations. (If the file descriptor refers to a socket or pipe, this will use `poll` to do asynchronous I/O. If it refers to a regular file, it will fall back to doing asynchronous I/O in another thread.)"],["UnixOutputStreamClass",""],["UnixSocketAddress","Support for UNIX-domain (also known as local) sockets."],["UnixSocketAddressClass",""],["Vfs","Entry point for using GIO functionality."],["VfsClass",""],["Volume","The `Volume` interface represents user-visible objects that can be mounted. Note, when porting from GnomeVFS, `Volume` is the moral equivalent of `GnomeVFSDrive`."],["VolumeMonitor","`VolumeMonitor` is for listing the user interesting devices and volumes on the computer. In other words, what a file selector or file manager would show in a sidebar."],["VolumeMonitorClass",""],["WatcherId",""],["WriteOutputStream",""],["ZlibCompressor","Zlib decompression"],["ZlibCompressorClass",""],["ZlibDecompressor","Zlib decompression"],["ZlibDecompressorClass",""]],"trait":[["ActionExt","Trait containing all `Action` methods."],["ActionGroupExt","Trait containing all `ActionGroup` methods."],["ActionMapExt","Trait containing all `ActionMap` methods."],["AppInfoExt","Trait containing all `AppInfo` methods."],["AppLaunchContextExt","Trait containing all `AppLaunchContext` methods."],["ApplicationCommandLineExt","Trait containing all `ApplicationCommandLine` methods."],["ApplicationExt","Trait containing all `Application` methods."],["BufferedInputStreamExt","Trait containing all `BufferedInputStream` methods."],["BufferedOutputStreamExt","Trait containing all `BufferedOutputStream` methods."],["CancellableExt","Trait containing all `Cancellable` methods."],["CharsetConverterExt","Trait containing all `CharsetConverter` methods."],["ConverterExt","Trait containing all `Converter` methods."],["ConverterInputStreamExt","Trait containing all `ConverterInputStream` methods."],["ConverterOutputStreamExt","Trait containing all `ConverterOutputStream` methods."],["DBusInterfaceExt","Trait containing all `DBusInterface` methods."],["DBusInterfaceSkeletonExt","Trait containing all `DBusInterfaceSkeleton` methods."],["DBusObjectExt","Trait containing all `DBusObject` methods."],["DBusProxyExt","Trait containing all `DBusProxy` methods."],["DataInputStreamExt","Trait containing all `DataInputStream` methods."],["DataOutputStreamExt","Trait containing all `DataOutputStream` methods."],["DesktopAppInfoExt","Trait containing all `DesktopAppInfo` methods."],["DriveExt","Trait containing all `Drive` methods."],["EmblemedIconExt","Trait containing all `EmblemedIcon` methods."],["FileEnumeratorExt","Trait containing all `FileEnumerator` methods."],["FileExt","Trait containing all `File` methods."],["FileIOStreamExt","Trait containing all `FileIOStream` methods."],["FileInputStreamExt","Trait containing all `FileInputStream` methods."],["FileMonitorExt","Trait containing all `FileMonitor` methods."],["FileOutputStreamExt","Trait containing all `FileOutputStream` methods."],["FilenameCompleterExt","Trait containing all `FilenameCompleter` methods."],["FilterInputStreamExt","Trait containing all `FilterInputStream` methods."],["FilterOutputStreamExt","Trait containing all `FilterOutputStream` methods."],["IOStreamExt","Trait containing all `IOStream` methods."],["IconExt","Trait containing all `Icon` methods."],["InetAddressExt","Trait containing all `InetAddress` methods."],["InetAddressMaskExt","Trait containing all `InetAddressMask` methods."],["InetSocketAddressExt","Trait containing all `InetSocketAddress` methods."],["InputStreamExt","Trait containing all `InputStream` methods."],["ListModelExt","Trait containing all `ListModel` methods."],["ListStoreExt","Trait containing all `ListStore` methods."],["LoadableIconExt","Trait containing all `LoadableIcon` methods."],["MemoryInputStreamExt","Trait containing all `MemoryInputStream` methods."],["MemoryMonitorExt","Trait containing all `MemoryMonitor` methods."],["MemoryOutputStreamExt","Trait containing all `MemoryOutputStream` methods."],["MenuAttributeIterExt","Trait containing all `MenuAttributeIter` methods."],["MenuLinkIterExt","Trait containing all `MenuLinkIter` methods."],["MenuModelExt","Trait containing all `MenuModel` methods."],["MountExt","Trait containing all `Mount` methods."],["MountOperationExt","Trait containing all `MountOperation` methods."],["NetworkAddressExt","Trait containing all `NetworkAddress` methods."],["NetworkMonitorExt","Trait containing all `NetworkMonitor` methods."],["NetworkServiceExt","Trait containing all `NetworkService` methods."],["OutputStreamExt","Trait containing all `OutputStream` methods."],["PermissionExt","Trait containing all `Permission` methods."],["PollableInputStreamExt","Trait containing all `PollableInputStream` methods."],["PollableOutputStreamExt","Trait containing all `PollableOutputStream` methods."],["ProxyAddressExt","Trait containing all `ProxyAddress` methods."],["ProxyExt","Trait containing all `Proxy` methods."],["ProxyResolverExt","Trait containing all `ProxyResolver` methods."],["RemoteActionGroupExt","Trait containing all `RemoteActionGroup` methods."],["ResolverExt","Trait containing all `Resolver` methods."],["SeekableExt","Trait containing all `Seekable` methods."],["SettingsBackendExt","Trait containing all `SettingsBackend` methods."],["SettingsExt","Trait containing all `Settings` methods."],["SocketAddressEnumeratorExt","Trait containing all `SocketAddressEnumerator` methods."],["SocketAddressExt","Trait containing all `SocketAddress` methods."],["SocketClientExt","Trait containing all `SocketClient` methods."],["SocketConnectableExt","Trait containing all `SocketConnectable` methods."],["SocketConnectionExt","Trait containing all `SocketConnection` methods."],["SocketExt","Trait containing all `Socket` methods."],["SocketListenerExt","Trait containing all `SocketListener` methods."],["SocketServiceExt","Trait containing all `SocketService` methods."],["TcpConnectionExt","Trait containing all `TcpConnection` methods."],["ThreadedSocketServiceExt","Trait containing all `ThreadedSocketService` methods."],["TlsCertificateExt","Trait containing all `TlsCertificate` methods."],["TlsClientConnectionExt","Trait containing all `TlsClientConnection` methods."],["TlsConnectionExt","Trait containing all `TlsConnection` methods."],["TlsDatabaseExt","Trait containing all `TlsDatabase` methods."],["TlsFileDatabaseExt","Trait containing all `TlsFileDatabase` methods."],["TlsInteractionExt","Trait containing all `TlsInteraction` methods."],["TlsPasswordExt","Trait containing all `TlsPassword` methods."],["TlsServerConnectionExt","Trait containing all `TlsServerConnection` methods."],["UnixFDListExt","Trait containing all `UnixFDList` methods."],["UnixInputStreamExt","Trait containing all `UnixInputStream` methods."],["UnixOutputStreamExt","Trait containing all `UnixOutputStream` methods."],["UnixSocketAddressExt","Trait containing all `UnixSocketAddress` methods."],["VfsExt","Trait containing all `Vfs` methods."],["VolumeExt","Trait containing all `Volume` methods."],["VolumeMonitorExt","Trait containing all `VolumeMonitor` methods."],["ZlibCompressorExt","Trait containing all `ZlibCompressor` methods."],["ZlibDecompressorExt","Trait containing all `ZlibDecompressor` methods."]]});